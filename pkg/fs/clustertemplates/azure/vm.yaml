---
apiVersion: cluster.x-k8s.io/v1alpha4
kind: Cluster
metadata:
  name: "{{.Cluster.Name}}"
  namespace: "{{.Cluster.Namespace}}"
  labels:
    cni: calico
spec:
  paused: {{.Cluster.Spec.Paused}}
  {{if .Cluster.Spec.Network}}
  clusterNetwork:
    {{if .Cluster.Spec.Network.Pods}}
    pods:
      {{range .Cluster.Spec.Network.Pods}}
      cidrBlocks:
        - {{. | quote}}
      {{end}}
    {{end}}
    {{if .Cluster.Spec.Network.Services}}
    services:
      {{range .Cluster.Spec.Network.Services}}
      cidrBlocks:
        - {{. | quote}}
      {{end}}
    {{end}}
  {{end}}
  {{if .Cluster.Spec.ControlPlane}}
  {{if .Cluster.Spec.ControlPlane.Endpoint}}
  controlPlaneEndpoint:
    host: {{.Cluster.Spec.ControlPlane.Endpoint.Host}}
    port: {{.Cluster.Spec.ControlPlane.Endpoint.Port}}
  {{end}}
  {{end}}
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha4
    kind: AzureCluster
    name: "{{.Cluster.Name}}"
    namespace: "{{.Cluster.Namespace}}"
  controlPlaneRef:
    kind: KubeadmControlPlane
    apiVersion: controlplane.cluster.x-k8s.io/v1alpha4
    name: "{{.Cluster.Name}}"
    namespace: "{{.Cluster.Namespace}}"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha4
kind: AzureCluster
metadata:
  name: "{{.Cluster.Name}}"
  namespace: "{{.Cluster.Namespace}}"
spec:
  location: "{{ .Cluster.Spec.InfrastructureProvider.Region}}"
  resourceGroup: "{{.Cluster.Name}}"
  subscriptionID: {{credentials .Credentials "subscriptionID"}}
  identityRef:
    kind: AzureClusterIdentity
    name: "{{.Cluster.Namespace}}"
    namespace: undistro-system
  {{if .Cluster.Spec.ControlPlane.InternalLB}}
  controlPlaneLoadBalancer:
    scheme: internal
  {{end}}
  {{if .Cluster.Spec.ControlPlane}}
  {{if .Cluster.Spec.ControlPlane.Endpoint}}
  controlPlaneEndpoint:
    host: {{.Cluster.Spec.ControlPlane.Endpoint.Host}}
    port: {{.Cluster.Spec.ControlPlane.Endpoint.Port}}
  {{end}}
  {{end}}
  {{if .Cluster.Spec.Bastion.Enabled}}
  bastionSpec:
    azureBastion: {}
  {{end}}
  {{if .Cluster.Spec.Network}}
  networkSpec:
    {{if .Cluster.Spec.Network.VPC}}
    vnet:
      {{if .Cluster.Spec.Network.VPC.ID}}
      id: {{ .Cluster.Spec.Network.VPC.ID}}
      {{end}}
      {{if .Cluster.Spec.Network.VPC.CIDRBlock}}
      cidrBlocks: 
        - {{ .Cluster.Spec.Network.VPC.CIDRBlock}}
      {{end}}
      resourceGroup: "{{.Cluster.Name}}"
      name: "{{.Cluster.Name}}-vnet"
    subnets:
    {{if .Cluster.Spec.Network.Subnets}}
    {{range .Cluster.Spec.Network.Subnets}}
    -
      {{if .ID}}
      id: {{.ID}}
      {{end}}
      {{if .CIDRBlock}}
      cidrBlocks: 
        - {{.CIDRBlock}}
      {{end}}
      name: "{{ .Cluster.Name }}-{{ .Cluster.Name.Spec.Network.Role }}"
      role: {{ .Cluster.Name.Spec.Network.Role }}
    {{end}}
    {{else}}
      - id: "{{ .Cluster.Name }}-control-plane"
        name: "{{ .Cluster.Name }}-control-plane"
        role: control-plane
      - id:  "{{ .Cluster.Name }}-worker"
        name: "{{ .Cluster.Name }}-worker"
        role: node
    {{end}}
  {{end}}
---
kind: KubeadmControlPlane
apiVersion: controlplane.cluster.x-k8s.io/v1alpha4
metadata:
  name: "{{.Cluster.Name}}"
namespace: "{{.Cluster.Namespace}}"
spec:
  replicas: {{ .Cluster.Spec.ControlPlane.Replicas}}
  machineTemplate:
    infrastructureRef:
      kind: AzureMachineTemplate
      apiVersion: infrastructure.cluster.x-k8s.io/v1alpha4
      name: "{{.Cluster.Name}}-cp-{{.Cluster.Status.LastUsedUID}}"
      namespace: "{{.Cluster.Namespace}}"
  kubeadmConfigSpec:
    useExperimentalRetryJoin: true
    initConfiguration:
      nodeRegistration:
        name: {{"'{{ ds.meta_data.local_hostname }}'"}}
        kubeletExtraArgs:
          azure-container-registry-config: /etc/kubernetes/azure.json
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: azure
          {{$taints := .Cluster.Spec.ControlPlane.TaintTmpl}}
          {{if $taints}}
          register-with-taints: "{{$taints}}"
          {{end}}
          {{$labels := .Cluster.Spec.ControlPlane.LabelsTmpl}}
          {{if $labels}}
          node-labels: "{{$labels}}"
          {{end}}
    clusterConfiguration:
      imageRepository: registry.undistro.io/k8s
      dns:
        imageRepository: registry.undistro.io/k8s/coredns
        imageTag: v1.8.0
      etcd:
        local:
          imageRepository: registry.undistro.io/k8s
            dataDir: /var/lib/etcddisk/etcd  
            extraArgs:
              quota-backend-bytes: "8589934592"
      apiServer:
        extraArgs:
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: azure
            extraVolumes:
              - hostPath: /etc/kubernetes/azure.json
                mountPath: /etc/kubernetes/azure.json
                name: cloud-config
                readOnly: true
                timeoutForControlPlane: 20m
      controllerManager:
        extraArgs:
          cloud-provider: azure
            allocate-node-cidrs: "false"
            cloud-config: /etc/kubernetes/azure.json
            cloud-provider: azure
            cluster-name: {{ .Cluster.Name }}
    joinConfiguration:
      nodeRegistration:
        name: {{"'{{ ds.meta_data.local_hostname }}'"}}
        kubeletExtraArgs:
          cloud-provider: azure
          {{$taints := .Cluster.Spec.ControlPlane.TaintTmpl}}
          {{if $taints}}
          register-with-taints: "{{$taints}}"
          {{end}}
          {{$labels := .Cluster.Spec.ControlPlane.LabelsTmpl}}
          {{if $labels}}
          node-labels: "{{$labels}}"
          {{end}}
  version: "{{.Cluster.Spec.KubernetesVersion}}"
---
kind: AzureMachineTemplate
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha4
metadata:
  name: "{{.Cluster.Name}}-cp-{{.Cluster.Status.LastUsedUID}}"
  namespace: "{{.Cluster.Namespace}}"
spec:
  {{if .Cluster.Spec.ControlPlane.ProviderTags}}
  additionalTags:
  {{range $key, $value := .Cluster.Spec.ControlPlane.ProviderTags}}
  {{$key}}: {{$value | quote}}
  {{end}}
  {{end}}
  template:
    {{if .Cluster.Spec.ControlPlane.Subnet}}
    subnetName: {{.Cluster.Spec.ControlPlane.Subnet}}
    {{end}}
    dataDisks:
      - diskSizeGB: 256
        lun: 0
        nameSuffix: etcddisk
    osDisk:
      diskSizeGB: 128
      osType: Linux
    {{if .Cluster.Spec.InfrastructureProvider.SSHKey}}
    sshPublicKey: "{{ .Cluster.Spec.InfrastructureProvider.SSHKey}}"
    {{end}}
    vmSize: {{.Cluster.Spec.ControlPlane.MachineType}}
---
apiVersion: cluster.x-k8s.io/v1alpha4
kind: MachineHealthCheck
metadata:
  name: "{{.Cluster.Name}}"
  namespace: "{{.Cluster.Namespace}}"
spec:
  clusterName: "{{.Cluster.Name}}"
  nodeStartupTimeout: 5m
  maxUnhealthy: 100%
  selector:
    matchLabels:
      cluster.x-k8s.io/control-plane: ""
  unhealthyConditions:
    - type: Ready
      status: Unknown
      timeout: 300s
    - type: Ready
      status: "False"
      timeout: 300s
{{$name := .Cluster.Name}}
{{$namespace := .Cluster.Namespace}}
{{$k8s := .Cluster.Spec.KubernetesVersion}}
{{$sshKey := .Cluster.Spec.InfrastructureProvider.SSHKey}}
{{$region := .Cluster.Spec.InfrastructureProvider.Region}}
{{$uid := .Cluster.Status.LastUsedUID}}
{{$subnets := .Cluster.Spec.Network.Subnets}}
{{range $index, $element := .Cluster.Spec.Workers}}
---
apiVersion: cluster.x-k8s.io/v1alpha4
kind: MachinePool
metadata:
  name: "{{$name}}-mp-{{$index}}"
  namespace: {{ $namespace }}
spec:
  clusterName: {{$name}}
  replicas: {{$element.Replicas}}
  template:
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1alpha4
          kind: KubeadmConfig
          name: "{{$name}}-mp-{{$index}}"
          namespace: "{{$namespace}}"
      clusterName: {{$name}}
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1alpha4
        kind: AzureMachinePool
        name: "{{$name}}-mp-{{$index}}"
        namespace: "{{$namespace}}"
      version: "{{$k8s}}"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha4
kind: AzureMachinePool
metadata:
  name: "{{$name}}-mp-{{$index}}"
  namespace: {{ $namespace }}
spec:
  location: {{ $region }}
  strategy:
    rollingUpdate:
      deletePolicy: Oldest
      maxSurge: 25%
      maxUnavailable: 1
    type: RollingUpdate
  template:
    osDisk:
      diskSizeGB: 30
      osType: Linux
    {{if .Cluster.Spec.InfrastructureProvider.SSHKey}}
    sshPublicKey: {{ $sshKey }}
    {{end}}
    vmSize: {{ $element.MachineType }}
  {{if $element.ProviderTags}}
  additionalTags:
    {{range $key, $value := $element.ProviderTags}}
    {{$key}}: {{$value | quote}}
    {{end}}
  {{end}}
  {{if $element.Subnet}}
  subnetName: {{$element.Subnet}}
  {{end}}
---
apiVersion: bootstrap.cluster.x-k8s.io/v1alpha4
kind: KubeadmConfig
metadata:
  name: "{{$name}}-mp-{{$uid}}-{{$index}}"
  namespace: {{ $name }}
spec:
  useExperimentalRetryJoin: true
  clusterConfiguration:
    imageRepository: registry.undistro.io/k8s
    dns:
      imageRepository: registry.undistro.io/k8s/coredns
      imageTag: v1.8.0
    etcd:
      local:
        imageRepository: registry.undistro.io/k8s
  joinConfiguration:
    nodeRegistration:
      name: {{"'{{ ds.meta_data.local_hostname }}'"}}
      kubeletExtraArgs:
        azure-container-registry-config: /etc/kubernetes/azure.json
        cloud-config: /etc/kubernetes/azure.json
        cloud-provider: azure
        {{$taints := $element.TaintTmpl}}
        {{if $taints}}
        register-with-taints: "{{$taints}}"
        {{end}}
        {{$labels := $element.LabelsTmpl}}
        {{if $labels}}
        node-labels: "{{$labels}}"
        {{end}}
{{end}}
