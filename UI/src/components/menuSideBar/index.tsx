import { useState, ReactNode } from 'react'
import './index.scss'
import Classnames from 'classnames'
import { useHistory } from 'react-router'
import Modal from 'util/modals'
import { useClusters } from 'providers/ClustersProvider'
import { useDisclosure } from 'hooks/useDisclosure'
import { PauseClusterAlert } from '@components/clusterActionAlert'
import { useLocation } from 'react-router-dom'
import { useServices } from 'providers/ServicesProvider'

type TypeSubItem = {
  name: string
  link?: string
  handleAction?: () => void | Promise<void>
  disabled?: boolean
}

type TypeItem = {
  name: string
  icon: ReactNode
  subItens: TypeSubItem[]
  url: string
  disabled?: boolean
}

const showModalCluster = () => {
  Modal.show('create-cluster', {
    title: 'Create',
    ndTitle: 'Cluster',
    width: '720',
    height: '600'
  })
}

const showModalRole = () => {
  Modal.show('create-role', {
    title: 'Create',
    ndTitle: 'Role',
    width: '774',
    height: '771'
  })
}

const MenuSideBar = () => {
  const { Api } = useServices()
  const { clusters, isEmpty } = useClusters()
  const [show, setShow] = useState<any>(false)
  const history = useHistory<any>()
  const [isPauseClusterAlertOpen, closePauseClusterAlert, openPauseClusterAlert] = useDisclosure()
  const location = useLocation()

  const handlePause = async () => {
    await Promise.all(
      clusters.map(async cluster => {
        const payload = {
          spec: {
            paused: !cluster.paused
          }
        }

        await Api.Cluster.put(payload, cluster.namespace, cluster.name)
      })
    )

    closePauseClusterAlert()
    window.location.reload()
  }

  const SubItens: TypeSubItem[] = [
    { name: 'Create', handleAction: () => showModalCluster() },
    { name: 'Pause', handleAction: openPauseClusterAlert, disabled: isEmpty },
    { name: 'Update', link: '/nodepools', disabled: isEmpty },
    { name: 'Settings', link: '/nodepools', disabled: clusters.length !== 1 }
  ]

  const SubItensAccess: TypeSubItem[] = [
    { name: 'List', handleAction: () => history.push('/roles') },
    { name: 'Create', handleAction: () => showModalRole() },
  ]

  const SubItensMachines: TypeSubItem[] = [
    { name: 'Nodepools', link: '/nodepools', disabled: clusters.length !== 1 },
    { name: 'Pause', link: '/nodepools', disabled: clusters.length !== 1 }
  ]

  const items: TypeItem[] = [
    {
      name: 'Cluster',
      icon: (
        <svg
          width="28"
          height="28"
          style={{ marginBottom: '4px', marginRight: '8px', marginLeft: '8px' }}
          viewBox="0 0 28 28"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path d="M20.9091 16.6949C19.3705 16.3511 17.8321 16.0073 16.2943 15.6627C16.1177 16.0952 15.8146 16.47 15.4144 16.7382C16.0941 18.1215 16.7744 19.5055 17.4548 20.8896L17.7166 21.4219C19.5299 20.457 20.9072 18.8056 21.4851 16.8237L20.9091 16.6949Z" fill="currentColor"/>
          <path d="M17.0034 21.7564C16.0832 22.1326 15.0731 22.3404 14.0134 22.3404C12.9455 22.3404 11.9278 22.1293 11.0017 21.7474L13.2953 17.0755C13.7544 17.2111 14.2431 17.2111 14.7021 17.0755C15.0948 17.8748 15.4879 18.6741 15.8809 19.4734L17.0034 21.7564Z" fill="currentColor"/>
          <path d="M10.9308 20.1109L10.2911 21.4117C8.48655 20.445 7.11645 18.7972 6.54109 16.8211L7.10007 16.6962C8.63623 16.3529 10.1723 16.0096 11.709 15.6656C11.8856 16.0981 12.1858 16.4729 12.5861 16.744C12.0347 17.8661 11.4827 18.9886 10.9308 20.1109Z" fill="currentColor"/>
          <path d="M7.38762 15.8368L6.36322 16.0657C6.28477 15.6316 6.24376 15.1847 6.24376 14.7285C6.24376 13.0825 6.7771 11.5584 7.68368 10.3132C8.71329 11.1178 9.74289 11.9221 10.7729 12.7266L11.8444 13.5637C11.6383 13.9212 11.5236 14.3278 11.5236 14.7545C11.5236 14.7885 11.5248 14.8226 11.5274 14.8566C11.5288 14.8745 11.5304 14.8923 11.5325 14.9102C10.1508 15.2195 8.76915 15.5282 7.38762 15.8368Z" fill="currentColor"/>
          <path d="M8.63483 10.0633L8.17601 9.70487C9.5159 8.21167 11.4433 7.23681 13.6044 7.12699V12.3585C13.313 12.4017 13.0275 12.4997 12.7626 12.6497C12.6066 12.7362 12.4654 12.84 12.3359 12.9553C11.1027 11.9908 9.86883 11.027 8.63483 10.0633Z" fill="currentColor"/>
          <path d="M14.396 12.3585V7.12569C16.5619 7.22858 18.495 8.20029 19.8399 9.69271L19.3665 10.0626L19.3652 10.0635C18.1313 11.0272 16.8976 11.9909 15.6645 12.9553C15.535 12.84 15.3938 12.7391 15.2378 12.6497C14.9729 12.4997 14.6874 12.4017 14.396 12.3585Z" fill="currentColor"/>
          <path d="M20.3331 10.2993C21.2458 11.547 21.7832 13.0763 21.7832 14.7285C21.7832 15.1859 21.742 15.6338 21.6631 16.0689L20.8497 15.8871C19.3894 15.5608 17.9291 15.2344 16.468 14.9073C16.4738 14.8554 16.4768 14.8035 16.4768 14.7516C16.4768 14.3278 16.365 13.9183 16.1589 13.5608C16.8049 13.0556 17.451 12.5507 18.097 12.0458L20.3331 10.2993Z" fill="currentColor"/>
          <path d="M14.0134 13.0562C14.9562 13.0562 15.7204 13.8049 15.7204 14.7285C15.7204 15.6521 14.9562 16.4008 14.0134 16.4008C13.0708 16.4008 12.3065 15.6521 12.3065 14.7285C12.3065 13.8049 13.0708 13.0562 14.0134 13.0562Z" fill="currentColor"/>
          <path fill-rule="evenodd" clip-rule="evenodd" d="M13.3785 1.15819L4.19407 6.15726C3.87478 6.33104 3.64296 6.63055 3.5546 6.98315L1.03899 17.0242C0.940216 17.4184 1.0315 17.8362 1.28579 18.1533L7.98774 26.5131C8.23454 26.8209 8.60766 27 9.00211 27H18.9979C19.3924 27 19.7655 26.8209 20.0122 26.5131L26.7142 18.1533C26.9684 17.8362 27.0598 17.4184 26.961 17.0242L24.4454 6.98315C24.3571 6.63055 24.1251 6.33104 23.8058 6.15726L14.6215 1.15819C14.2341 0.947271 13.766 0.947271 13.3785 1.15819ZM18.8107 25.4342C18.4855 24.7717 18.1601 24.1094 17.8347 23.4473C16.6623 23.9411 15.3706 24.2146 14.0134 24.2146C12.6484 24.2146 11.3494 23.9379 10.1715 23.4385L9.18975 25.44C9.07054 25.3838 8.95184 25.3274 8.83339 25.2712C8.71507 25.215 8.59662 25.1588 8.47753 25.1026C8.80482 24.4357 9.13237 23.769 9.46004 23.1023C7.13917 21.8885 5.38212 19.7758 4.67333 17.2386L2.47663 17.73L2.30003 16.9746C3.03193 16.8106 3.76395 16.6468 4.4961 16.4831C4.38755 15.9145 4.3308 15.328 4.3308 14.7285C4.3308 12.6404 5.01941 10.7098 6.18638 9.14297L4.4396 7.77689L4.93409 7.1714L6.67896 8.53534C8.37153 6.61313 10.838 5.36343 13.6044 5.25079V3.08H14.396V5.24974C17.1672 5.35524 19.6395 6.60169 21.3372 8.52308C21.9137 8.07263 22.4901 7.62209 23.0663 7.1714L23.5608 7.77689C22.9842 8.2279 22.4073 8.67874 21.8304 9.1295C23.0035 10.6988 23.6961 12.6344 23.6961 14.7285C23.6961 15.3291 23.6391 15.9167 23.5302 16.4863L25.7004 16.9717L25.6132 17.345L25.6121 17.3494L25.5238 17.7272C24.8003 17.5651 24.0766 17.4031 23.3528 17.2412C22.6416 19.7842 20.8772 21.9006 18.5476 23.1124L19.5229 25.0969C19.4049 25.1525 19.2877 25.2081 19.1706 25.2637L19.1668 25.2655L18.9641 25.3617L18.8107 25.4342Z" fill="currentColor"/>
        </svg>
      ),
      subItens: SubItens,
      url: '/'
    },
    {
      name: 'Machines',
      disabled: clusters.length !== 1,
      icon: (
        <svg
          width="28"
          height="28"
          style={{ marginBottom: '4px', marginRight: '8px', marginLeft: '8px' }}
          viewBox="0 0 28 28"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M10.893 22.4565V1.5435L16.959 0V24L10.893 22.4565ZM12.355 19.9775C12.355 20.7475 12.9545 21.5035 13.7175 21.6715C14.508 21.846 15.1675 21.3265 15.1675 20.5055C15.1675 19.6845 14.508 18.9165 13.7175 18.7945C12.955 18.6775 12.355 19.2075 12.355 19.9775ZM11.2245 16.2805L16.53 16.8305V14.824L11.2245 14.5035V16.2805ZM11.2245 12.527L16.53 12.5945V10.5895L11.2245 10.75V12.527ZM11.2245 8.772L16.53 8.3585V6.35L11.2245 6.993V8.772ZM11.2245 5.0165L16.53 4.1225V2.1155L11.2245 3.238V5.0165Z"
            fill="currentColor"
          />
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M17.326 24V0L24 2.4225V21.5775L17.326 24ZM22.2215 19.6055L23.536 19.274V4.726L22.2215 4.3945V19.6055Z"
            fill="currentColor"
          />
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M0 4.171V19.809L4.53599 20.963V3.017L0 4.171ZM2.112 19.221C1.5415 19.0955 1.093 18.53 1.093 17.9545C1.093 17.379 1.543 16.9815 2.112 17.0695C2.7035 17.162 3.2 17.7365 3.2 18.35C3.2 18.9635 2.7035 19.3525 2.112 19.222V19.221ZM4.215 15.6025L0.25 15.1925V13.862L4.215 14.1V15.6025ZM4.215 12.4345L0.25 12.384V11.054L4.21699 10.9345L4.215 12.4345ZM4.215 9.267L0.25 9.576V8.246L4.21699 7.7665L4.215 9.267ZM4.215 6.0995L0.25 6.768V5.438L4.215 4.6V6.0995Z"
            fill="currentColor"
          />
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M4.81049 20.963V3.017L9.75549 4.8285V19.15L4.81049 20.963ZM8.47099 17.6795L9.45399 17.4295V6.553L8.47099 6.303V17.6795Z"
            fill="currentColor"
          />
        </svg>
      ),
      subItens: SubItensMachines,
      url: '/nodepools'
    },
    {
      name: 'Access Control',
      disabled: true,
      icon: (
        <svg
          width="28"
          height="28"
          viewBox="0 0 28 28"
          fill="none"
          style={{ marginBottom: '4px', marginRight: '8px', marginLeft: '8px' }}
          xmlns="http://www.w3.org/2000/svg"
        >
        <path fill-rule="evenodd" clip-rule="evenodd" d="M14 27C14 27 2 21.8 2 12.7V4.9L14 1L26 4.9V12.7C26 21.8 14 27 14 27ZM15.4045 4.94927C17.1192 5.21326 18.6709 5.95633 19.9035 7.03445L21.3531 5.92555L23.1384 8.06399L21.6745 9.18374C22.3747 10.3954 22.7751 11.7926 22.7751 13.2799C22.7751 13.4534 22.7697 13.6259 22.7589 13.7971L24.591 14.1981L23.9453 16.8919L22.1176 16.4914C21.4733 17.9975 20.392 19.279 19.0323 20.1954L19.8537 21.8305L17.3094 23.0055L16.4905 21.374C15.703 21.5972 14.8704 21.7167 14.0104 21.7167C13.1444 21.7167 12.3061 21.5956 11.5136 21.3692L10.6909 23.0101L8.14658 21.8352L8.97433 20.1858C7.62068 19.2697 6.5443 17.9911 5.90235 16.4894L4.05451 16.8939L3.40891 14.2005L5.26175 13.7946C5.25109 13.6242 5.24568 13.4526 5.24568 13.2799C5.24568 11.7972 5.6437 10.404 6.33981 9.19493L4.86153 8.06386L6.64668 5.92555L8.10758 7.04302C9.33668 5.96468 10.8844 5.22005 12.5953 4.95253V3.16667H15.4045V4.94927ZM17.3636 20.9112C17.1362 20.4431 16.9087 19.9752 16.6812 19.5073C15.8614 19.8562 14.958 20.0494 14.009 20.0494C13.0544 20.0494 12.146 19.8539 11.3224 19.5011L10.6358 20.9153C10.5532 20.8759 10.4709 20.8364 10.3888 20.7971L10.3866 20.796L10.3825 20.794C10.3011 20.755 10.2197 20.7159 10.1378 20.6769C10.3667 20.2057 10.5957 19.7346 10.8248 19.2636C9.20187 18.406 7.97319 16.9132 7.47755 15.1205L5.94139 15.4677L5.87965 15.2009L5.81791 14.934C6.32968 14.8181 6.84158 14.7024 7.35356 14.5867C7.27766 14.1849 7.23797 13.7706 7.23797 13.347C7.23797 11.8716 7.71956 10.5076 8.53562 9.40049L7.31412 8.43528L7.65987 8.00746C8.06649 8.32879 8.47322 8.65 8.88001 8.97116C10.0636 7.61301 11.7885 6.73003 13.7229 6.65044V5.11665H13.9997H14.2765V6.6497C16.2144 6.72424 17.9432 7.60493 19.1304 8.9625C19.5335 8.64423 19.9366 8.3259 20.3396 8.00746L20.6853 8.43528C20.2821 8.75394 19.8787 9.07248 19.4753 9.39097C20.2956 10.4997 20.78 11.8674 20.78 13.347C20.78 13.7714 20.7402 14.1865 20.664 14.5889L22.1815 14.932L22.1205 15.1957L22.1198 15.1988L22.0581 15.4657C21.5521 15.3512 21.046 15.2367 20.5399 15.1224C20.0426 16.9191 18.8087 18.4145 17.1797 19.2707L17.8617 20.6728C17.7789 20.7123 17.6961 20.752 17.6138 20.7914L17.612 20.7923C17.5294 20.8319 17.4468 20.8716 17.3636 20.9112ZM18.831 14.7364C17.7552 14.4935 16.6793 14.2505 15.604 14.0071C15.4805 14.3126 15.2685 14.5775 14.9886 14.7669C15.4655 15.7476 15.9429 16.7287 16.4203 17.7099L16.4254 17.7203L16.4318 17.7336L16.5986 18.0763C17.8665 17.3945 18.8297 16.2277 19.2339 14.8274L18.8339 14.737L18.831 14.7364ZM15.6482 17.3845L16.0999 18.3126C15.4563 18.5784 14.75 18.7253 14.009 18.7253C13.2622 18.7253 12.5505 18.5761 11.9028 18.3063L12.55 16.9744L13.5068 15.0053C13.8279 15.101 14.1695 15.101 14.4906 15.0053C14.876 15.7979 15.2618 16.5906 15.6477 17.3834L15.6482 17.3845ZM11.8533 17.15L11.406 18.069C10.1441 17.386 9.18602 16.2217 8.7836 14.8256L9.16949 14.7384L9.17456 14.7373C10.2487 14.4947 11.3229 14.2522 12.3975 14.0091C12.521 14.3147 12.7309 14.5795 13.0108 14.771C12.6253 15.5639 12.2392 16.357 11.8533 17.15ZM9.37566 14.1301L8.65927 14.2918C8.60436 13.9851 8.57571 13.6693 8.57571 13.347C8.57571 12.184 8.94866 11.1071 9.58263 10.2273C10.3027 10.7958 11.0226 11.3641 11.7429 11.9325L12.4922 12.524C12.3481 12.7766 12.2679 13.0638 12.2679 13.3653C12.2679 13.402 12.2699 13.4387 12.274 13.4754C11.3082 13.6938 10.3423 13.9119 9.37656 14.1299L9.37566 14.1301ZM10.2478 10.0507L9.92693 9.7975C10.8639 8.74247 12.2117 8.05368 13.7229 7.97608V11.6724C13.5192 11.703 13.3195 11.7722 13.1343 11.8782C13.0252 11.9393 12.9264 12.0126 12.8359 12.0941C11.9737 11.4128 11.111 10.732 10.2484 10.0512L10.2478 10.0507ZM14.2765 11.6724V7.97516C15.7911 8.04786 17.1429 8.73443 18.0834 9.78892L17.7514 10.0509C16.8886 10.7318 16.0258 11.4127 15.1636 12.0941C15.073 12.0126 14.9742 11.9413 14.8651 11.8782C14.6799 11.7722 14.4803 11.703 14.2765 11.6724ZM18.0971 10.4787L18.4282 10.2175C19.0665 11.0991 19.4423 12.1796 19.4423 13.347C19.4423 13.6701 19.4135 13.9866 19.3583 14.2941L18.9533 14.2026L18.9483 14.2015L18.9388 14.1993C17.8678 13.9575 16.7969 13.7157 15.7254 13.4733C15.7295 13.4366 15.7316 13.4 15.7316 13.3633C15.7316 13.0638 15.6534 12.7745 15.5093 12.5219C16.3716 11.8405 17.2344 11.1596 18.0971 10.4787ZM14.009 12.1654C14.6682 12.1654 15.2027 12.6944 15.2027 13.347C15.2027 13.9996 14.6682 14.5286 14.009 14.5286C13.3497 14.5286 12.8153 13.9996 12.8153 13.347C12.8153 12.6944 13.3497 12.1654 14.009 12.1654Z" fill="currentColor"/>
        </svg>
      ),
      subItens: SubItensAccess,
      url: '/roles'
    }
  ]

  const toggle = (i: any) => {
    show === i ? setShow(null) : setShow(i)
  }

  const handleRedirect = (link: string) => {
    history.push(link)
  }

  return (
    <>
      <PauseClusterAlert
        heading="Multiple clusters selected"
        isOpen={isPauseClusterAlertOpen}
        onActionConfirm={handlePause}
        onDismiss={closePauseClusterAlert}
      />
      <div className="menu-side-container">
        <ul className="side-itens">
          {location.pathname !== '/' && (
            <li onClick={() => history.push('/')} className="side-item-default">
              <svg
                width="27"
                height="27"
                style={{ marginBottom: '4px', marginRight: '12px', marginLeft: '8px' }}
                viewBox="0 0 27 27"
                fill="currentColor"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  fillRule="evenodd"
                  clipRule="evenodd"
                  d="M16.9328 23.9502C17.2666 24.6314 17.6002 25.3126 17.9337 25.9941C18.0557 25.9364 18.1769 25.8787 18.2981 25.821L18.299 25.8206C18.4205 25.7627 18.5419 25.7049 18.6642 25.6471C18.3309 24.9668 17.9975 24.2863 17.6639 23.6058C20.0532 22.3593 21.8628 20.1824 22.5923 17.5666C23.3346 17.7331 24.0768 17.8997 24.8189 18.0664C24.8491 17.9374 24.8793 17.8076 24.9094 17.6779L24.9105 17.6733C24.9403 17.5451 24.9702 17.4169 25 17.2894C24.2579 17.1228 23.5161 16.9563 22.7743 16.79C22.886 16.2041 22.9444 15.5997 22.9444 14.9819C22.9444 12.8279 22.234 10.8368 21.0309 9.22266C21.6226 8.759 22.2141 8.29525 22.8056 7.83134L22.2985 7.20851C21.7074 7.6721 21.1163 8.13554 20.525 8.59888C18.7838 6.6225 16.2482 5.34036 13.406 5.23185V3H12.594V5.23292C9.75682 5.34879 7.22707 6.63425 5.49109 8.61148C4.89446 8.14394 4.29792 7.67631 3.70155 7.20851L3.19444 7.83134C3.79176 8.30002 4.38892 8.76837 4.98598 9.23651C3.78909 10.8482 3.08276 12.834 3.08276 14.9819C3.08276 15.5986 3.14097 16.2018 3.25229 16.7867C2.50138 16.9551 1.75061 17.1237 1 17.2923C1.03018 17.4213 1.06037 17.5511 1.09055 17.6809C1.1207 17.8104 1.15096 17.9405 1.18111 18.0694C1.93226 17.9007 2.68325 17.7323 3.43414 17.5639C4.16108 20.1736 5.96314 22.3469 8.34346 23.5954C8.00746 24.2811 7.67155 24.967 7.33581 25.653C7.45798 25.7108 7.5794 25.7686 7.70082 25.8264C7.82232 25.8842 7.94403 25.9422 8.06628 26C8.40193 25.3135 8.73758 24.6273 9.07323 23.9413C10.2812 24.4549 11.6136 24.7395 13.0136 24.7395C14.4054 24.7395 15.7304 24.4582 16.9328 23.9502ZM15.3529 15.9429C16.9301 16.2973 18.508 16.651 20.0859 17.0046L20.0902 17.0056C20.2857 17.0494 20.4812 17.0932 20.6767 17.1371C20.084 19.1757 18.6713 20.8744 16.8116 21.8669C16.7301 21.7006 16.6486 21.5343 16.5671 21.3681L16.5576 21.3487C15.8549 19.9153 15.1523 18.4818 14.4504 17.0491C14.8609 16.7733 15.1718 16.3878 15.3529 15.9429ZM16.0803 22.2109C15.8595 21.7605 15.6386 21.3102 15.4178 20.8598C14.8516 19.7051 14.2855 18.5506 13.7199 17.3961C13.249 17.5355 12.748 17.5355 12.2771 17.3961C11.8093 18.3519 11.3415 19.3074 10.8738 20.2628C10.5574 20.9091 10.241 21.5554 9.92457 22.2017C10.8745 22.5946 11.9182 22.8117 13.0136 22.8117C14.1003 22.8117 15.1363 22.598 16.0803 22.2109ZM9.19587 21.8564C9.41455 21.4103 9.63323 20.9644 9.85191 20.5184C10.418 19.364 10.9841 18.2093 11.5496 17.0551C11.1391 16.7763 10.8312 16.3907 10.6501 15.9458C9.07393 16.2997 7.49851 16.6528 5.92309 17.0059L5.91566 17.0076C5.727 17.0499 5.53835 17.0922 5.34969 17.1345C5.9399 19.167 7.34508 20.862 9.19587 21.8564ZM5.16733 16.3574C5.51754 16.2789 5.86778 16.2004 6.21803 16.122C7.63484 15.8045 9.05192 15.4869 10.469 15.1688C10.463 15.1154 10.4599 15.062 10.4599 15.0086C10.4599 14.5697 10.5777 14.1515 10.789 13.7838L9.68994 12.9227C8.6336 12.0952 7.57763 11.2679 6.5216 10.4402C5.59177 11.7211 5.04477 13.2888 5.04477 14.9819C5.04477 15.4512 5.08679 15.9109 5.16733 16.3574ZM7.02657 9.81449C7.18344 9.93738 7.3403 10.0603 7.49717 10.1831C8.76271 11.1745 10.0283 12.1659 11.293 13.158C11.4259 13.0393 11.5707 12.9326 11.7307 12.8436C12.0024 12.6894 12.2952 12.5885 12.594 12.544V7.16283C10.3776 7.27579 8.40084 8.27855 7.02657 9.81449ZM13.406 7.16149V12.544C13.7048 12.5885 13.9976 12.6894 14.2693 12.8436C14.4293 12.9355 14.5741 13.0393 14.707 13.158C15.9716 12.166 17.237 11.1747 18.5024 10.1834L18.5037 10.1824C18.6656 10.0556 18.8275 9.92881 18.9894 9.80199C17.61 8.26685 15.6274 7.26732 13.406 7.16149ZM19.4951 10.4259C19.3333 10.5527 19.1714 10.6795 19.0096 10.8063C17.7441 11.7975 16.4787 12.7888 15.2141 13.7808C15.4254 14.1486 15.5401 14.5697 15.5401 15.0057C15.5401 15.0591 15.537 15.1124 15.531 15.1658C17.1071 15.5197 18.6825 15.8728 20.2579 16.2259L20.2653 16.2275C20.4633 16.2719 20.6613 16.3163 20.8592 16.3607C20.9402 15.9131 20.9824 15.4524 20.9824 14.9819C20.9824 13.2824 20.4313 11.7094 19.4951 10.4259ZM14.7643 14.9819C14.7643 14.0319 13.9805 13.2618 13.0136 13.2618C12.0467 13.2618 11.2629 14.0319 11.2629 14.9819C11.2629 15.932 12.0467 16.7021 13.0136 16.7021C13.9805 16.7021 14.7643 15.932 14.7643 14.9819Z"
                  fill="cuurentColor"
                />
              </svg>
            </li>
          )}
          {items.map((elm: any, i = 0) => {
            return (
              <div key={i}>
                <li onClick={() => toggle(i)} className={Classnames(elm.disabled ? 'item-disabled' : 'side-item', { active: show === i })}>
                  {typeof elm.icon === 'string' ? <i className={elm.icon} /> : elm.icon}
                  <p>{elm.name}</p>
                  {show === i ? <i className="icon-arrow-right-solid show" /> : <i className="icon-arrow-right-solid" />}
                </li>
                {elm.disabled ? false : show === i && (
                  <div className="item-menu">
                    {elm.subItens.map((elm: TypeSubItem) => (
                      <p
                        key={elm.name}
                        className={elm.disabled ? 'item-menu-disabled' : ''}
                        onClick={() => {
                          if (elm.disabled) return

                          elm.handleAction?.() || handleRedirect(elm.link!)
                        }}
                      >
                        {elm.name}
                      </p>
                    ))}
                  </div>
                )}
              </div>
            )
          })}
        </ul>
      </div>
    </>
  )
}

export default MenuSideBar
